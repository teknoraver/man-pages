.\" Copyright, The authors of the Linux man-pages project
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.TH unlink 2 (date) "Linux man-pages (unreleased)"
.SH NAME
unlink, unlinkat \- delete a name and possibly the file it refers to
.SH LIBRARY
Standard C library
.RI ( libc ,\~ \-lc )
.SH SYNOPSIS
.nf
.B #include <unistd.h>
.P
.BI "int unlink(const char *" path );
.P
.BR "#include <fcntl.h>           " "/* Definition of " AT_* " constants */"
.B #include <unistd.h>
.P
.BI "int unlinkat(int " dirfd ", const char *" path ", int " flags );
.fi
.P
.RS -4
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.RE
.P
.BR unlinkat ():
.nf
    Since glibc 2.10:
        _POSIX_C_SOURCE >= 200809L
    Before glibc 2.10:
        _ATFILE_SOURCE
.fi
.SH DESCRIPTION
.BR unlink ()
deletes a name from the filesystem.
If that name was the
last link to a file and no processes have the file open, the file is
deleted and the space it was using is made available for reuse.
.P
If the name was the last link to a file but any processes still have
the file open, the file will remain in existence until the last file
descriptor referring to it is closed.
.P
If the name referred to a symbolic link, the link is removed.
.P
If the name referred to a socket, FIFO, or device, the name for it is
removed but processes which have the object open may continue to use
it.
.SS unlinkat()
The
.BR unlinkat ()
system call operates in exactly the same way as either
.BR unlink ()
or
.BR rmdir (2)
(depending on whether or not
.I flags
includes the
.B AT_REMOVEDIR
flag)
except for the differences described here.
.P
If
.I path
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.I dirfd
(rather than relative to the current working directory of
the calling process, as is done by
.BR unlink ()
and
.BR rmdir (2)
for a relative pathname).
.P
If
.I path
is relative and
.I dirfd
is the special value
.BR AT_FDCWD ,
then
.I path
is interpreted relative to the current working
directory of the calling process (like
.BR unlink ()
and
.BR rmdir (2)).
.P
If
.I path
is absolute, then
.I dirfd
is ignored.
.P
.I flags
is a bit mask that can either be specified as 0, or by ORing
together flag values that control the operation of
.BR unlinkat ().
Currently, only one such flag is defined:
.TP
.B AT_REMOVEDIR
By default,
.BR unlinkat ()
performs the equivalent of
.BR unlink ()
on
.IR path .
If the
.B AT_REMOVEDIR
flag is specified, it
performs the equivalent of
.BR rmdir (2)
on
.IR path .
.P
See
.BR openat (2)
for an explanation of the need for
.BR unlinkat ().
.SH RETURN VALUE
On success, zero is returned.
On error, \-1 is returned, and
.I errno
is set to indicate the error.
.SH ERRORS
.TP
.B EACCES
Write access to the directory containing
.I path
is not allowed for the process's effective UID, or one of the
directories in
.I path
did not allow search permission.
(See also
.BR path_resolution (7).)
.TP
.B EBUSY
.I path
cannot be unlinked because it is being used by the system
or another process;
for example, it is a mount point
or the NFS client software created it to represent an
active but otherwise nameless inode ("NFS silly renamed").
.TP
.B EFAULT
.I path
points outside your accessible address space.
.TP
.B EIO
An I/O error occurred.
.TP
.B EISDIR
.I path
refers to a directory.
(This is the non-POSIX value returned since Linux 2.1.132.)
.TP
.B ELOOP
Too many symbolic links were encountered in translating
.IR path .
.TP
.B ENAMETOOLONG
.I path
was too long.
.TP
.B ENOENT
A component in
.I path
does not exist or is a dangling symbolic link, or
.I path
is empty.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B ENOTDIR
A component used as a directory in
.I path
is not, in fact, a directory.
.TP
.B EPERM
The system does not allow unlinking of directories,
or unlinking of directories requires privileges that the
calling process doesn't have.
(This is the POSIX prescribed error return;
as noted above, Linux returns
.B EISDIR
for this case.)
.TP
.BR EPERM " (Linux only)"
The filesystem does not allow unlinking of files.
.TP
.BR EPERM " or " EACCES
The directory containing
.I path
has the sticky bit
.RB ( S_ISVTX )
set and the process's effective UID is neither the UID of the file to
be deleted nor that of the directory containing it, and
the process is not privileged (Linux: does not have the
.B CAP_FOWNER
capability).
.TP
.B EPERM
The file to be unlinked is marked immutable or append-only.
(See
.BR FS_IOC_SETFLAGS (2const).)
.TP
.B EROFS
.I path
refers to a file on a read-only filesystem.
.P
The same errors that occur for
.BR unlink ()
and
.BR rmdir (2)
can also occur for
.BR unlinkat ().
The following additional errors can occur for
.BR unlinkat ():
.TP
.B EBADF
.I path
is relative but
.I dirfd
is neither
.B AT_FDCWD
nor a valid file descriptor.
.TP
.B EINVAL
An invalid flag value was specified in
.IR flags .
.TP
.B EISDIR
.I path
refers to a directory, and
.B AT_REMOVEDIR
was not specified in
.IR flags .
.TP
.B ENOTDIR
.I path
is relative and
.I dirfd
is a file descriptor referring to a file other than a directory.
.SH STANDARDS
POSIX.1-2008.
.SH HISTORY
.TP
.BR unlink ()
SVr4, 4.3BSD, POSIX.1-2001.
.\" SVr4 documents additional error
.\" conditions EINTR, EMULTIHOP, ETXTBSY, ENOLINK.
.TP
.BR unlinkat ()
POSIX.1-2008.
Linux 2.6.16,
glibc 2.4.
.SS glibc
On older kernels where
.BR unlinkat ()
is unavailable, the glibc wrapper function falls back to the use of
.BR unlink ()
or
.BR rmdir (2).
When
.I path
is relative,
glibc constructs a pathname based on the symbolic link in
.I /proc/self/fd
that corresponds to the
.I dirfd
argument.
.SH BUGS
Infelicities in the protocol underlying NFS can cause the unexpected
disappearance of files which are still being used.
.SH SEE ALSO
.BR rm (1),
.BR unlink (1),
.BR chmod (2),
.BR link (2),
.BR mknod (2),
.BR open (2),
.BR rename (2),
.BR rmdir (2),
.BR mkfifo (3),
.BR remove (3),
.BR path_resolution (7),
.BR symlink (7)
