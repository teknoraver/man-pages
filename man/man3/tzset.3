'\" t
.\" Copyright, the authors of the Linux man-pages project
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.TH tzset 3 (date) "Linux man-pages (unreleased)"
.SH NAME
tzset, tzname, timezone, daylight \- initialize time conversion information
.SH LIBRARY
Standard C library
.RI ( libc ,\~ \-lc )
.SH SYNOPSIS
.nf
.B #include <time.h>
.P
.B void tzset(void);
.P
.BI "extern char *" tzname [2];
.BI "extern long " timezone ;
.BI "extern int " daylight ;
.fi
.P
.RS -4
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.RE
.P
.BR tzset ():
.nf
    _POSIX_C_SOURCE
.fi
.P
.IR tzname :
.nf
    _POSIX_C_SOURCE
.fi
.P
.IR timezone ,
.IR daylight :
.nf
    _XOPEN_SOURCE
        || /* glibc >= 2.19: */ _DEFAULT_SOURCE
        || /* glibc <= 2.19: */ _SVID_SOURCE
.fi
.SH DESCRIPTION
The
.BR tzset ()
function initializes the
.I tzname
variable from the
.B TZ
environment variable.
This function is automatically called by the
other time conversion functions that depend on the timezone.
In a System-V-like environment, it will also set the variables
.I timezone
(seconds West of UTC)
and
.I daylight
(to 0 if this timezone does not
have any daylight saving time rules, or to nonzero if there is a time,
past, present, or future when daylight saving time applies).
.P
The
.BR tzset ()
function initializes these variables to unspecified values if this
timezone is a geographical timezone like "America/New_York" (see below).
.P
If the
.B TZ
variable does not appear in the environment, the system timezone is used.
The system timezone is configured by copying, or linking, a file in the
.BR tzfile (5)
format to
.IR /etc/localtime .
A timezone database of these files may be located in the system
timezone directory (see the
.B FILES
section below).
.P
If the
.B TZ
variable does appear in the environment, but its value is empty,
or its value cannot be interpreted using any of the formats specified
below, then Coordinated Universal Time (UTC) is used.
.P
A nonempty value of
.B TZ
can be one of two formats,
either of which can be preceded by a colon which is ignored.
The first format is a string of characters that directly represent the
timezone to be used:
.P
.in +4n
.EX
.IR "std offset" [ dst [ offset ][, start [ /time ], end [ /time ]]]
.EE
.in
.P
There are no spaces in the specification.
The
.I std
string specifies an abbreviation for the timezone
and must be
three or more alphabetic characters.
When enclosed between the less-than (<) and greater-than (>) signs, the
character set is expanded to include the plus (+) sign, the minus (\-)
sign, and digits.
The
.I offset
string
immediately follows
.I std
and specifies the time value to be added to the local time
to get Coordinated Universal Time (UTC).
The
.I offset
is positive
if the local timezone is west of the Prime Meridian
and negative
if it is east.
The hour must be between 0 and 24, and the minutes and seconds 00 and 59:
.P
.in +4n
.EX
.RI [ + | \- ] hh [ :mm [ :ss ]]
.EE
.in
.P
The
.I dst
string and
.I offset
specify the name and offset for the
corresponding daylight saving timezone.
If the offset is omitted,
it defaults to one hour ahead of standard time.
.P
The
.I start
field specifies when daylight saving time goes into effect
and the
.I end
field specifies when the change is made back to
standard time.
These fields may have the following formats:
.TP
.RI J n
This specifies the Julian day with
.I n
between 1 and 365.
Leap days are not counted.
In this format, February 29 can't be represented;
February 28 is day 59, and March 1 is always day 60.
.TP
.I n
This specifies the zero-based Julian day with
.I n
between 0 and 365.
February 29 is counted in leap years.
.TP
.RI M m . w . d
This specifies day
.I d
.RI (0\~<=\~ d \~<=\~6)
of week
.I w
.RI (1\~<=\~ w \~<=\~5)
of month
.I m
.RI (1\~<=\~ m \~<=\~12).
Week 1 is
the first week in which day
.I d
occurs and week 5 is the last week
in which day
.I d
occurs.
Day 0 is a Sunday.
.P
The
.I time
fields specify when,
in the local time currently in effect,
the change to the other time occurs.
They use the same format as
.I offset
except that the hour can be in the range
.RB [ \-167 ,\~
.BR 167 ]
to represent times before and after the named day.
If omitted, the default is 02:00:00.
.P
Here is an example for New Zealand,
where the standard time (NZST) is 12 hours ahead of UTC,
and daylight saving time (NZDT), 13 hours ahead of UTC,
runs from September's last Sunday, at the default time 02:00:00,
to April's first Sunday at 03:00:00.
.P
.in +4n
.EX
TZ="NZST\-12:00:00NZDT\-13:00:00,M9.5.0,M4.1.0/3"
.EE
.in
.P
The second
\[em]or "geographical"\[em]
format specifies that the timezone information should be read
from a file:
.P
.in +4n
.EX
filespec
.EE
.in
.P
The
.I filespec
specifies a
.BR tzfile (5)-format
file to read the timezone information from.
If
.I filespec
does not begin with a
.RB \[aq] / \[aq],
the file specification is
relative to the system timezone directory.
If the specified file cannot be read or interpreted,
Coordinated Universal Time (UTC) is used;
however, applications should not depend on random
.I filespec
values standing for UTC, as
.B TZ
formats may be extended in the future.
.P
Here's an example, once more for New Zealand:
.P
.in +4n
.EX
TZ="Pacific/Auckland"
.EE
.in
.SH ENVIRONMENT
.TP
.B TZ
If this variable is set its value takes precedence over the system
configured timezone.
.TP
.B TZDIR
If this variable is set its value takes precedence over the system
configured timezone database directory path.
.SH FILES
.TP
.I /etc/localtime
The system timezone file.
.TP
.I /usr/share/zoneinfo/
The system timezone database directory.
.TP
.I /usr/share/zoneinfo/posixrules
When a TZ string includes a dst timezone without anything following it,
then this file is used for the start/end rules.
It is in the
.BR tzfile (5)
format.
By default, the zoneinfo Makefile hard links it to the
.IR America/New_York " tzfile."
.P
Above are the current standard file locations, but they are
configurable when glibc is compiled.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
.na
.nh
.BR tzset ()
T}	Thread safety	MT-Safe env locale
.TE
.SH STANDARDS
POSIX.1-2024.
.SH HISTORY
.TP
.BR tzset ()
.TQ
.I tzname
POSIX.1-1988, SVr4, 4.3BSD.
.TP
.I timezone
.TQ
.I daylight
POSIX.1-2001 (XSI), SVr4, 4.3BSD.
.P
4.3BSD had a function
.BI "char *timezone(" zone ", " dst )
that returned the
name of the timezone corresponding to its first argument (minutes
West of UTC).
If the second argument was 0, the standard name was used,
otherwise the daylight saving time version.
.SH CAVEATS
Because the values of
.IR tzname ,
.IR timezone ,
and
.I daylight
are often unspecified,
and accessing them can lead to
undefined behavior in multithreaded applications,
code should instead obtain time zone offset and abbreviations from the
.I tm_gmtoff
and
.I tm_zone
members of the broken-down time structure
.BR tm (3type).
.SH BUGS
Since this function does not report errors,
there's no way to know if the value of TZ represents a valid time zone.
.SH SEE ALSO
.BR date (1),
.BR gettimeofday (2),
.BR time (2),
.BR ctime (3),
.BR getenv (3),
.BR tzfile (5)
