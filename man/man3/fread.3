'\" t
.\" Copyright 1990-1991, The Regents of the University of California.
.\" Copyright, the authors of the Linux man-pages project
.\"
.\" SPDX-License-Identifier: BSD-4-Clause-UC
.\"
.TH fread 3 (date) "Linux man-pages (unreleased)"
.SH NAME
fread, fwrite \- binary stream input/output
.SH LIBRARY
Standard C library
.RI ( libc ,\~ \-lc )
.SH SYNOPSIS
.nf
.B #include <stdio.h>
.P
.BI "size_t fread(size_t " size ", size_t " n ;
.BI "             void " ptr "[restrict " size " * " n ],
.BI "             size_t " size ", size_t " n ,
.BI "             FILE *restrict " stream );
.BI "size_t fwrite(size_t " size ", size_t " n ;
.BI "             const void " ptr "[restrict " size " * " n ],
.BI "             size_t " size ", size_t " n ,
.BI "             FILE *restrict " stream );
.fi
.SH DESCRIPTION
The function
.BR fread ()
reads
.I n
items of data, each
.I size
bytes long, from the stream pointed to by
.IR stream ,
storing them at the location given by
.IR ptr .
.P
The function
.BR fwrite ()
writes
.I n
items of data, each
.I size
bytes long, to the stream pointed to by
.IR stream ,
obtaining them from the location given by
.IR ptr .
.P
For nonlocking counterparts, see
.BR unlocked_stdio (3).
.SH RETURN VALUE
On success,
.BR fread ()
and
.BR fwrite ()
return the number of items read or written.
This number equals the number of bytes transferred only when
.I size
is 1.
If an error occurs, or the end of the file is reached,
the return value is a short item count (or zero).
.P
The file position indicator for the stream is advanced by the number
of bytes successfully read or written.
.P
.BR fread ()
does not distinguish between end-of-file and error, and callers must use
.BR feof (3)
and
.BR ferror (3)
to determine which occurred.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
.na
.nh
.BR fread (),
.BR fwrite ()
T}	Thread safety	MT-Safe
.TE
.SH STANDARDS
C11, POSIX.1-2008.
.SH HISTORY
POSIX.1-2001, C89.
.SH EXAMPLES
The program below demonstrates the use of
.BR fread ()
by parsing /bin/sh ELF executable in binary mode and printing its
magic and class:
.P
.in +4n
.EX
.RB $ " ./a.out" ;
ELF magic: 0x7f454c46
Class: 0x02
.EE
.in
.SS Program source
\&
.\" SRC BEGIN (fread.c)
.EX
#include <stdio.h>
#include <stdlib.h>
\&
#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))
\&
int
main(void)
{
    FILE           *fp;
    size_t         ret;
    unsigned char  buffer[4];
\&
    fp = fopen("/bin/sh", "rb");
    if (!fp) {
        perror("fopen");
        return EXIT_FAILURE;
    }
\&
    ret = fread(buffer, sizeof(*buffer), ARRAY_SIZE(buffer), fp);
    if (ret != ARRAY_SIZE(buffer)) {
        fprintf(stderr, "fread() failed: %zu\[rs]n", ret);
        exit(EXIT_FAILURE);
    }
\&
    printf("ELF magic: %#04x%02x%02x%02x\[rs]n", buffer[0], buffer[1],
           buffer[2], buffer[3]);
\&
    ret = fread(buffer, 1, 1, fp);
    if (ret != 1) {
        fprintf(stderr, "fread() failed: %zu\[rs]n", ret);
        exit(EXIT_FAILURE);
    }
\&
    printf("Class: %#04x\[rs]n", buffer[0]);
\&
    fclose(fp);
\&
    exit(EXIT_SUCCESS);
}
.EE
.\" SRC END
.SH SEE ALSO
.BR read (2),
.BR write (2),
.BR feof (3),
.BR ferror (3),
.BR unlocked_stdio (3)
